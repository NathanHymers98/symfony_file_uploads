liip_imagine:
    #    # valid drivers options include "gd" or "gmagick" or "imagick"
    #    driver: "gd"

    # The loaders are using for reading the original image
    loaders:
        # This creates a loader called 'flysystem_loader'
        flysystem_loader:
            # Below is the key part. This says to use the flysystem loader that comes with the bundle
            flysystem:
                filesystem_service: oneup_flysystem.public_uploads_filesystem_filesystem

    # default loader to use for all filter sets
    data_loader: flysystem_loader

    # The resolver is responsible for saving the thumbnail image back to the filesystem after all of the transformations
    resolvers:
        flysystem_resolver:
            flysystem:
                filesystem_service: oneup_flysystem.public_uploads_filesystem_filesystem
                root_url:           '%uploads_base_url%'
                cache_prefix:       media/cache

    # This tells the bundle to always use this resolver
    cache: flysystem_resolver

    #    # define your filter sets under this option
    filter_sets:
        # Using this package to create filters that will allow me to change the size of the images on the website so that they are a more reasonable size
        squared_thumbnail_small:
            filters:
                # This filter set will have this 'thumbnail' filter, which changes the size of images to 200x200, the mode is set to outbound because that is how the thumbnail is applied
                thumbnail:
                    size:          [200, 200]
                    mode:          outbound
                    allow_upscale: true
        squared_thumbnail_medium:
            filters:
                thumbnail:
                    size:          [500, 500]
                    mode:          outbound
                    allow_upscale: true
#
#            # set your image quality defaults
#            jpeg_quality:          85
#            png_compression_level: 8
#
#            # setup the filter steps to apply for this transformation
#            filters:
#
#                # auto rotate the image using EXIF metadata
#                auto_rotate: ~
#
#                # strip the image of all metadata
#                strip: ~
#
#                # scale and square the image to the given dimensions
#                thumbnail:
#                    size:          [253, 253]
#                    mode:          outbound
#                    allow_upscale: true
#
#                # create border by placing image on larger black background
#                background:
#                    size:     [256, 256]
#                    position: center
#                    color:    '#fff'